teniendo en cuenta la siguiente gramatica
grammar = {
    'E': ['E+T', 'T'],
    'T': ['T*F', 'F'],
    'F': ['(E)', 'i']
} 
calculando el LR(0) agrego un nuevo estado que derive en el primer no terminal ejemplo S -> E
y el signo "•" como la funcion de closure(I) 
entonces, me da de la siguiente forma:
I0: {
    'S': [ '•E' ], #kernel
    'E': ['•E+T'],
    'E': ['•T'],
    'T': ['•T*F'],
    'T': ['•F'],
    'F': ['•(E)'],
    'F': ['•i']
}
Goto(I0, 'E')
I1: {
    'S': [ 'E•'],
    'E': ['E•+T']
}
Goto(I0, 'T')
I2: {
    'E': [ 'T•' ], 
    'T': ['T•*F']
}
Goto(I0, 'F')
I3: {
    'T': [ 'F•' ]
}
Goto(I0, '(')
I4: {
    'F': [ '(•E)' ],
    'E': ['•E+T'],
    'E': ['•T'],
    'T': ['•T*F'],
    'T': ['•F'],
    'F': ['•(E)'],
    'F': ['•i']
}
Goto(I0, 'i')
I5: {
    'F': [ 'i•' ],
}
Goto(I1, '+')
I6: {
    'E': ['E+•T'], 
    'T': ['•T*F'],
    'T': ['•F'],
    'F': ['•(E)'],
    'F': ['•i']
}
Goto(I2, '*')
I7:{
    'T': ['T*•F'], 
    'F': ['•(E)'],
    'F': ['•i']
}
Goto(I4, 'E')
I8: {
    'F': ['(E•)'], 
    'E': ['E•+T']
}
Goto(I6, 'T')
I9: {
    'E': ['E+T•'], 
    'T': ['T•*F']
}
Goto(I7, 'F')
I10: {
    'T': ['T*F•']
}
Goto(I8, ')')
I11: {
    'F': ['(E)•']
}

+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|     | $   | (   | )   | *   | +   | E   | F   | T   | i   |
+=====+=====+=====+=====+=====+=====+=====+=====+=====+=====+
| I0  |     | S4  |     |     |     | 1   | 3   | 2   | S5  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I1  | Acc |     |     |     | S6  |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I2  | RE  |     | RE  | S7  | RE  |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I3  | RT  |     | RT  | RT  | RT  |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I4  |     | S4  |     |     |     | 8   | 3   | 2   | S5  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I5  | RF  |     | RF  | RF  | RF  |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I6  |     | S4  |     |     |     |     | 3   | 9   | S5  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I7  |     | S4  |     |     |     |     | 10  |     | S5  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I8  |     |     | S11 |     | S6  |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I9  |     |     |     | S7  |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I10 | RT  |     | RT  | RT  | RT  |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| I11 | RF  |     | RF  | RF  | RF  |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

{0: {'T': ('goto', 1), '(': ('shift', 2), 'F': ('goto', 3), 'i': ('shift', 4), 'E':
('goto', 5)}, 1: {'*': ('shift', 6), '+': ('reduce', 'E', 'T'), '$': ('reduce', 'E', 'T'), ')':
('reduce', 'E', 'T')}, 2: {'T': ('goto', 1), '(': ('shift', 2), 'F': ('goto', 3), 'i':
('shift', 4), 'E': ('goto', 7)}, 3: {'+': ('reduce', 'T', 'F'), '$': ('reduce', 'T', 'F'), ')':
('reduce', 'T', 'F'), '*': ('reduce', 'T', 'F')}, 4: {'$': ('reduce', 'F', 'i'), ')': ('reduce', 'F', 'i'),
'*': ('reduce', 'F', 'i'), '+': ('reduce', 'F', 'i')}, 5: {'+': ('shift', 8)}, 6: {'(': ('shift', 2), 'F':
('goto', 9), 'i': ('shift', 4)}, 7: {'+': ('shift', 8), ')': ('shift', 10)}, 8: {'(': ('shift', 2), 'F':
('goto', 3), 'T': ('goto', 11), 'i': ('shift', 4)}, 9: {'+': ('reduce', 'T', 'T*F'), '$':
('reduce', 'T', 'T*F'), ')': ('reduce', 'T', 'T*F'), '*': ('reduce', 'T', 'T*F')}, 10:
{'$': ('reduce', 'F', '(E)'), ')': ('reduce', 'F', '(E)'), '*': ('reduce', 'F', '(E)'),
'+': ('reduce', 'F', '(E)')}, 11: {'*': ('shift', 6), '$': 'accept'}}